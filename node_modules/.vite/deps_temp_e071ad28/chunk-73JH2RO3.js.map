{
  "version": 3,
  "sources": ["../../alchemy-sdk/src/internal/request-batcher.ts", "../../alchemy-sdk/src/api/alchemy-provider.ts"],
  "sourcesContent": ["import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n", "import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = {\n      ...this.connection,\n      headers: {\n        ...this.connection.headers,\n        'Alchemy-Ethers-Sdk-Method': 'batchSend'\n      }\n    };\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n\n    this.modifyFormatter();\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n\n  /**\n   * Overrides the base `Formatter` class inherited from ethers to support\n   * returning custom fields in Ethers response types.\n   *\n   * For context, ethers has a `Formatter` class that is used to format the\n   * response from a JSON-RPC request. Any fields that are not defined in the\n   * `Formatter` class are removed from the returned response. By modifying the\n   * `Formatter` class in this method, we can add support for fields that are\n   * not defined in ethers.\n   */\n  private modifyFormatter(): void {\n    this.formatter.formats['receiptLog']['removed'] = val => {\n      if (typeof val === 'boolean') {\n        return val;\n      }\n      return undefined;\n    };\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n"],
  "mappings": "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",
  "names": ["getNetworkFromEthers", "result"]
}
